import openai
import json
from pathlib import Path
import os
# 保存生成的客户数据
output_dir = Path(__file__).parent
output_dir.mkdir(exist_ok=True)

# 设置Deepseek API密钥
api_key = "sk-1a2v23fdad34513d51234"

openai.api_key = api_key

# 定义生成客户数据的函数
import concurrent.futures

prompt = """请根据以下模板和注意事项生成一个详细的客户画像：
注意事项 1. 内容要具体且量化，避免模糊表述, 要符合实际, 生动而具体
2. 结合客户实际场景描述需求
3. 突出客户特征对应的个性化需求
4. 生成客户的一些特殊需求
5. 生成客户一定要多样化，且具体化
6. 直接按照模板生成信息，不要有别的无关内容，只要结果!!!
# 客户画像：[称谓]（[特征标签]）
## 基本信息
- 姓名：
- 年龄：具体年龄段（如35-40岁）
- 职业：
  - 具体职位和职级
  - 工作年限和发展阶段
  - 工作性质（如常规办公/经常出差/居家办公等）
  - 工作压力和强度
  - 职业发展规划
  - 社交圈层特征
- 家庭情况：
  - 家庭成员构成
  - 子女年龄和教育阶段
  - 是否与父母同住
  - 家庭决策模式和话语权
  - 家庭生活重心
  - 家庭教育理念
  - 亲子活动频率
  - 家庭氛围特点
- 居住地：
  - 国籍和地区（如中国/美国/英国等）
  - 城市和具体区域
  - 住房类型（如公寓/别墅）
  - 车位情况和停车便利性
  - 充电设施状况（适用于新能源车型）
  - 社区配套设施
  - 周边交通状况
  - 生活便利度评估
  - 未来置业规划
- 家庭财务：
  - 固定收入范围和稳定性
  - 其他收入来源（投资/副业等）
  - 月固定支出结构
  - 可支配收入分配
  - 投资理财习惯
  - 债务状况（房贷/车贷等）
  - 消费观念和习惯
  - 财务规划目标

## 生活场景
- 工作日：
  - 通勤距离和路线规划
  - 停车环境（公司/住宅/商圈）
  - 接送小孩需求和时间安排
  - 商务用车频率和场合
  - 日常代步场景和路况
  - 工作午餐出行需求
  - 加班或临时用车情况
  - 商务拜访路线规划
  - 会议和培训出行需求
- 周末：
  - 家庭活动（购物/郊游/探亲）
  - 社交活动（朋友聚会/商务应酬）
  - 兴趣爱好（运动/休闲/娱乐）
  - 休闲娱乐场所和频率
  - 周末出行半径和目的地
  - 亲子活动安排
  - 购物习惯和场所选择
  - 餐饮娱乐偏好
  - 运动健身需求
- 节假日：
  - 长途自驾频率和习惯
  - 假期出行目的地类型和距离
  - 载物需求（行李/运动装备/采购）
  - 乘坐人数变化和座位需求
  - 特殊场合用车需求和场景
  - 假期活动规划特点
  - 自驾游路线偏好
  - 假期社交活动特点
  - 节日庆典参与度

## 明确需求
- 预算规划：
  - 购车预算区间和构成
  - 月供承受能力和期限
  - 保险预算和配置
  - 养车预算和规划
  - 购置税和上牌费用
  - 能源消耗预算
  - 维修保养成本预期
  - 金融方案偏好
- 外观设计：
  - 车身尺寸要求和实用性
  - 外观风格偏好（运动/稳重/时尚）
  - 车身颜色倾向和搭配
  - 轮毂样式和尺寸喜好
  - 车身线条审美
  - 前脸设计偏好
  - 车尾造型要求
  - 细节装饰期望
- 动力系统：
  - 动力类型选择（燃油/混动/纯电）
  - 动力输出需求和驾驶感受
  - 续航里程要求和使用场景
  - 能耗期望和成本控制
  - 加速性能要求
  - 驾驶模式多样性
  - 动力响应特性
  - 能源补给便利性
- 车型选择：
  - 目标细分市场定位
  - 重点考虑品牌和理由
  - 竞品对比维度和清单
  - 期望购车时间和原因
  - 品牌溢价接受度
  - 车型更新换代考虑
  - 二手车保值率关注
  - 个性化定制需求

## 隐性需求
### 1. 经济性能
- 燃油/能源消耗：
  - 百公里油耗/电耗数据
  - 加油/充电便利性和网络
  - 能源成本预期和控制
  - 新能源车补贴政策解读
  - 能源价格波动影响
  - 充电桩布局和规划
  - 能源使用习惯分析
  - 节能驾驶需求
- 维修保养：
  - 保养周期和项目
  - 零件价格水平和供应
  - 保养套餐选择和性价比
  - 维修网点覆盖和便利性
  - 原厂件和替代件选择
  - 保养时间安排灵活度
  - 维修技师专业度要求
  - 紧急救援服务需求
- 保险费用：
  - 车险档次选择标准
  - 商业险配置组合
  - 新车保值率评估
  - 理赔便利性和效率
  - 保险公司选择偏好
  - 增值服务需求
  - 保险费用优惠方案
  - 保险续保考虑
- 使用成本：
  - 零部件耐用性和质保
  - 车辆贬值预期评估
  - 车辆残值保障
  - 二手车置换计划
  - 日常维护成本
  - 改装升级预算
  - 车辆使用年限规划
  - 车辆保养记录要求

### 2. 驾驶便利
- 操控性：
  - 转向反馈和精准度
  - 制动性能和稳定性
  - 悬挂调校和舒适度
  - 驾驶模式切换便利性
  - 加速响应特性
  - 换挡平顺性
  - 转弯半径要求
  - 高速稳定性表现
- 视野和空间：
  - 前后排视野范围
  - 座椅调节范围和记忆
  - 储物空间布局和实用性
  - 后备箱容积和形状
  - A柱盲区处理
  - 后排空间利用
  - 乘坐姿势舒适度
  - 装载空间变化
- 辅助功能：
  - 泊车辅助系统全面性
  - 360度全景影像清晰度
  - 盲点监测可靠性
  - 自适应巡航智能度
  - 车道保持辅助
  - 交通标志识别
  - 夜视辅助系统
  - 自动泊车功能
- 智能互联：
  - 手机互联功能兼容性
  - 语音控制系统准确度
  - 远程控制功能范围
  - OTA升级支持频率
  - 导航系统实用性
  - 车载娱乐系统
  - 移动办公支持
  - 个性化设置同步

### 3. 安全配置
- 主动安全：
  - 碰撞预警系统灵敏度
  - 自动紧急制动反应时间
  - 车道保持辅助精准度
  - 疲劳驾驶提醒方式
  - 前向碰撞预警距离
  - 车距控制精度
  - 紧急避让辅助
  - 交叉路口预警
- 被动安全：
  - 安全气囊配置和覆盖
  - 车身结构强度和材质
  - 儿童座椅接口标准
  - 安全带预紧器效果
  - 车门防撞梁设计
  - 座椅防滑移设计
  - 碰撞变形区域
  - 高强度钢材使用
- 辅助系统：
  - 夜视辅助系统效果
  - 道路交通标识识别准确度
  - 自动泊车系统可靠性
  - 驾驶模式选择多样性
  - 雨天行驶辅助
  - 坡道辅助功能
  - 胎压监测系统
  - 车身稳定控制
- 安全认证：
  - 碰撞测试成绩详情
  - 安全认证等级评估
  - 主被动安全配置清单
  - 安全技术更新频率
  - 第三方安全评测
  - 安全召回记录
  - 事故数据分析
  - 用户安全反馈

### 4. 舒适性能
- 乘坐舒适：
  - 座椅材质和透气性
  - 按摩功能调节范围
  - 腿部空间实际表现
  - 头部空间余量设计
  - 座椅加热/通风效果
  - 扶手设计和位置
  - 座椅记忆功能
  - 后排座椅角度
- 减震系统：
  - 悬挂类型和特点
  - 减震调节模式选择
  - 路感反馈真实度
  - 底盘调校平衡性
  - 过减速带表现
  - 转弯侧倾控制
  - 高速稳定性
  - 颠簸路面表现
- 静谧性：
  - 风噪控制效果
  - 胎噪表现评估
  - 发动机噪音隔离
  - 隔音材料分布
  - 怠速震动控制
  - 车门关闭声音
  - 雨刷运行噪音
  - 空调风扇声音
- 空调系统：
  - 温度分区控制精度
  - 空气净化功能效果
  - 通风/加热座椅速度
  - 后排出风口设计
  - 除雾除霜效率
  - 空调制冷速度
  - 车内空气质量
  - 香氛系统选配

## 购车痛点
1. 主要顾虑：
   - 价格与预算的平衡点
   - 品牌认可度和口碑
   - 产品可靠性和质量
   - 技术更新迭代速度
   - 使用场景适配度
   - 家庭成员意见
   - 社交圈层评价
   - 个人发展规划
2. 决策障碍：
   - 配置选择复杂度
   - 车型对比维度多
   - 购车时机把握难
   - 家庭意见分歧大
   - 性能参数理解难
   - 优惠政策把握难
   - 贷款方案选择难
   - 保险方案复杂
3. 使用担忧：
   - 保养维护成本高
   - 充电设施不完善
   - 技术使用门槛高
   - 二手车残值低
   - 故障维修不便
   - 油耗/电耗超预期
   - 配件供应不稳定
   - 售后服务体验差
4. 价值诉求：
   - 品牌价值认同感
   - 性价比要求标准
   - 使用体验期望值
   - 售后服务标准高
   - 社会地位象征
   - 个性化需求满足
   - 环保理念契合
   - 科技感体现

## 推荐要点
- 核心卖点：
  - 品牌价值传递方式
  - 产品技术创新点
  - 设计语言独特性
  - 用户痛点解决案例
  - 竞品优势对比
  - 市场口碑反馈
  - 获奖认证情况
  - 用户好评亮点
- 功能优势：
  - 智能化配置层级
  - 动力系统特色
  - 空间利用创新
  - 安全防护体系
  - 舒适性突破点
  - 节能环保表现
  - 操控性亮点
  - 科技感展现
- 价值主张：
  - 购车成本收益分析
  - 使用成本优势说明
  - 品质保证承诺细则
  - 升级服务方案设计
  - 个性化定制空间
  - 品牌增值服务
  - 忠诚客户权益
  - 社交价值体现
- 服务保障：
  - 维修保养网络密度
  - 金融方案灵活度
  - 保险服务便捷性
  - 会员增值服务项
  - 紧急救援响应
  - 备用车支持
  - 置换服务方案
  - 专属管家服务

### 4. 舒适性能
- 乘坐舒适：
  - 座椅材质和支撑
  - 按摩功能配置
  - 腿部空间表现
  - 头部空间余量
- 减震系统：
  - 悬挂类型
  - 减震调节模式
  - 路感反馈
  - 底盘调校
- 静谧性：
  - 风噪控制
  - 胎噪表现
  - 发动机噪音
  - 隔音材料
- 空调系统：
  - 温度分区控制
  - 空气净化功能
  - 通风/加热座椅
  - 后排出风口配置

## 购车痛点
1. 主要顾虑：
   - 价格与预算的平衡
   - 品牌认可度
   - 产品可靠性
   - 技术更新迭代
2. 决策障碍：
   - 配置选择难度
   - 车型对比困扰
   - 购车时机把握
   - 家庭意见分歧
3. 使用担忧：
   - 保养维护成本
   - 充电设施完善度
   - 技术使用门槛
   - 二手车残值
4. 价值诉求：
   - 品牌价值认同
   - 性价比要求
   - 使用体验期望
   - 售后服务标准

## 推荐要点
- 核心卖点：
  - 品牌价值传递
  - 产品技术亮点
  - 设计语言特色
  - 用户痛点解决方案
- 功能优势：
  - 智能化配置优势
  - 动力系统特点
  - 空间利用方案
  - 安全防护体系
- 价值主张：
  - 购车成本收益
  - 使用成本优势
  - 品质保证承诺
  - 升级服务方案
- 服务保障：
  - 维修保养网络
  - 金融方案选择
  - 保险服务支持
  - 会员增值服务
        """
def generate_single_customer(_):
    try:
        # 构建生成客户数据的prompt

        client = openai.OpenAI(api_key=api_key, base_url="https://api.deepseek.com/v1")
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=2000,
            temperature=0.7
        )

        customer_data = response.choices[0].message.content
        
        # 解析客户称谓和特征标签
        first_line = customer_data.split('\n')[0]
        title = first_line.replace('# 客户画像：', '').split('（')[0]
        tag = first_line.split('（')[1].replace('）', '')

        # 生成文件名并保存
        from pathvalidate import sanitize_filename
        
        # 创建特征标签目录
        tag_dir = output_dir / tag.replace(' ', '_')
        tag_dir.mkdir(parents=True, exist_ok=True)
        
        # 清洗文件名并生成路径
        safe_title = sanitize_filename(title, replacement_text="_")
        safe_tag = sanitize_filename(tag, replacement_text="_")
        filename = f"{safe_tag}-{safe_title}.md"
        
        # 保存文件
        with open(tag_dir / filename, 'w', encoding='utf-8') as f:
            f.write(customer_data)
        return True
    except Exception as e:
        print(f"生成客户数据时出错: {str(e)}")
        return False

def generate_customer_data(num_customers=5):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(generate_single_customer, i) for i in range(num_customers)]
        
        successful_count = 0
        for future in concurrent.futures.as_completed(futures):
            if future.result():
                successful_count += 1
        print(f"成功生成 {successful_count}/{num_customers} 个客户档案")

    # 调用Deepseek API生成数据
    client = openai.OpenAI(api_key=api_key, base_url="https://api.deepseek.com/v1")
    response = client.chat.completions.create(
        model="deepseek-chat",
        messages=[
            {"role": "user", "content": prompt}
        ],
        max_tokens=2000,
        temperature=0.7
    )

    # 解析返回的数据
    customer_data = response.choices[0].message.content


    # 解析客户称谓和特征标签
    if customer_data:
        first_line = customer_data.split('\n')[0]
        if '（' in first_line and '）' in first_line:
            title = first_line.replace('# 客户画像：', '').split('（')[0]
            tag = first_line.split('（')[1].replace('）', '')
        else:
            title = '未知客户'
            tag = '未知特征'

    # 根据README.md的命名规范生成文件名
    filename = f"{tag}-{title}.md"

    # 按照README.md的模板格式保存文件
    with open(output_dir / filename, 'w', encoding='utf-8') as f:
        f.write(customer_data)

# 主函数
if __name__ == "__main__":
    # 生成客户信息
    customer_data = generate_customer_data()

if __name__ == "__main__":
    generate_customer_data(num_customers=1)